# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
var dancer1, dancer2;

function five_to_three() {
    executionInfo.checkTimeout(); if (executionInfo.isTerminated()){return;}
  five_to_three();
}


everySeconds(3, "seconds", function () {
});

whenSetup(function () {
  stopMapping('Hk7[?UFSl;{Tu[@=}]~|', "tint", "mid");
  makeNewDanceSpriteGroup(40, "DOG", "left");
  setBackgroundEffectWithPalette("growing_stars", "electronic");
  changeMoveEachLR(sprites, MOVES.Clown, -1);
  setDanceSpeedEach(sprites, 1);
  stopMapping('{_YQs`X-lDE^?}{K{qd*', "scale", "bass");
  makeNewDanceSpriteGroup(40, "DOG", "x");
  setDanceSpeedEach(sprites, 1);
  makeNewDanceSpriteGroup(20, "DOG", "right");
  setForegroundEffectExtended("confetti");
  changeMoveEachLR(sprites, MOVES.Clown, -1);
  setDanceSpeedEach(sprites, 1);
  makeNewDanceSpriteGroup(40, "FROG", "diamond");
  makeNewDanceSpriteGroup(40, "FROG", "diamond");
  makeNewDanceSpriteGroup(40, "FROG", "x");
  makeNewDanceSpriteGroup(40, "FROG", "column");
});

everySeconds(2, "seconds", function () {
});

